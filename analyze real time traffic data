// Import necessary modules and libraries
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const { spawn } = require('child_process'); // For ML model integration
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection setup
mongoose.connect('mongodb://localhost:27017/trafficDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'Connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

// Define schemas and models
const TrafficDataSchema = new mongoose.Schema({
  location: String,
  timestamp: Date,
  vehicleCount: Number,
  signalTiming: Number, // Optimized signal timing in seconds
});

const TrafficData = mongoose.model('TrafficData', TrafficDataSchema);

// Function to call the ML model for traffic signal optimization
const optimizeSignalTiming = (vehicleCount) => {
  return new Promise((resolve, reject) => {
    const pythonProcess = spawn('python', [path.join(__dirname, 'traffic_model.py'), vehicleCount]);

    pythonProcess.stdout.on('data', (data) => {
      resolve(parseFloat(data.toString()));
    });

    pythonProcess.stderr.on('data', (data) => {
      reject(data.toString());
    });
  });
};

// Endpoint to receive real-time traffic data and optimize signal timing
app.post('/traffic-data', async (req, res) => {
  try {
    const { location, vehicleCount } = req.body;

    // Predict optimized signal timing using ML model
    const signalTiming = await optimizeSignalTiming(vehicleCount);

    // Save traffic data with optimized signal timing
    const newData = new TrafficData({
      location,
      timestamp: new Date(),
      vehicleCount,
      signalTiming,
    });

    await newData.save();

    res.status(200).send({
      message: 'Traffic data saved successfully',
      signalTiming,
    });
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Failed to process traffic data' });
  }
});

// Endpoint to retrieve optimized signal timings for a location
app.get('/signal-timings/:location', async (req, res) => {
  try {
    const { location } = req.params;

    const recentData = await TrafficData.findOne({ location }).sort({ timestamp: -1 });

    if (!recentData) {
      return res.status(404).send({ message: 'No data found for the specified location' });
    }

    res.status(200).send({
      location: recentData.location,
      signalTiming: recentData.signalTiming,
    });
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Failed to retrieve signal timings' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// React Frontend Integration (placeholder for development)
// Serve static files for production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'client/build')));

  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
  });
}
