// Import necessary modules and libraries
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const { spawn } = require('child_process'); // For ML model integration
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection setup
mongoose.connect('mongodb://localhost:27017/trafficDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'Connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

// Define schemas and models
const TrafficDataSchema = new mongoose.Schema({
  location: String,
  timestamp: Date,
  vehicleCount: Number,
  accidentReports: Number,
});

const TrafficData = mongoose.model('TrafficData', TrafficDataSchema);

// Function to call the ML model for traffic prediction
const predictTraffic = (vehicleCount) => {
  return new Promise((resolve, reject) => {
    const pythonProcess = spawn('python', [path.join(__dirname, 'traffic_model.py'), vehicleCount]);

    pythonProcess.stdout.on('data', (data) => {
      resolve(JSON.parse(data.toString())); // Expecting a JSON response with signal timings
    });

    pythonProcess.stderr.on('data', (data) => {
      reject(data.toString());
    });
  });
};

// Endpoint to receive real-time traffic data
app.post('/traffic-data', async (req, res) => {
  try {
    const { location, vehicleCount, accidentReports } = req.body;

    const newData = new TrafficData({
      location,
      timestamp: new Date(),
      vehicleCount,
      accidentReports,
    });

    await newData.save();

    // Predict and optimize signal timings based on vehicleCount
    const signalTiming = await predictTraffic(vehicleCount);

    res.status(200).send({
      message: 'Traffic data processed successfully',
      signalTiming,
    });
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Failed to process traffic data' });
  }
});

// Endpoint to retrieve actionable insights for city planners
app.get('/insights', async (req, res) => {
  try {
    const aggregatedData = await TrafficData.aggregate([
      {
        $group: {
          _id: '$location',
          averageVehicles: { $avg: '$vehicleCount' },
          totalAccidents: { $sum: '$accidentReports' },
        },
      },
    ]);

    res.status(200).send({ insights: aggregatedData });
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Failed to retrieve insights' });
  }
});

// Serve real-time traffic dashboard
app.get('/dashboard', (req, res) => {
  res.sendFile(path.join(__dirname, 'client', 'dashboard.html'));
});

// Endpoint to send live traffic data for the dashboard
app.get('/live-traffic', async (req, res) => {
  try {
    const liveData = await TrafficData.find({})
      .sort({ timestamp: -1 })
      .limit(10); // Fetch the latest 10 traffic data entries

    res.status(200).send({ liveTraffic: liveData });
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Failed to fetch live traffic data' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// React Frontend Integration (placeholder for development)
// Serve static files for production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'client/build')));

  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
  });
}
